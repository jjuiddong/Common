//
// Script Remote Debugger Protocol 2
//	- WebSocket Communication
//		- binary/json format
//	- Host : Interpreter (Run Script, c++)
//	- Remote : WebServer or WebBrowser (javascript)
//	- h2r : Host -> Remote Client
//	- r2h : Remote Client -> Host
//


protocol r2h 5301 json
{
	UploadIntermediateCode(int itprId, int vmId, string code );
	ReqIntermediateCode(int itprId, int vmId);

	ReqRun(int itprId, string runType);
	ReqOneStep(int itprId);
	ReqResumeRun(int itprId);
	ReqBreak(int itprId, int vmId);
	ReqBreakPoint( int itprId, int vmId, bool enable, uint id);
	ReqStop(int itprId);
	ReqInput(int itprId, int vmId, string eventName);
	ReqEvent(int itprId, int vmId, string eventName, map<string, vector<string>> values);
	ReqStepDebugType(int stepDbgType);
	ReqDebugInfo(vector<int> vmIds);
	ReqVariableInfo(int itprId, int vmId, string varName);
	ReqChangeVariable(int itprId, int vmId, string varName, string value);
	ReqVMTree();
	ReqHeartBeat();
}


protocol h2r 5300 json
{
	Welcome( string msg );
	AckUploadIntermediateCode(int itprId, int vmId, int result );
	AckIntermediateCode(BYTE itprId, int vmId, BYTE result, BYTE count, BYTE index
		, uint totalBufferSize, vector<BYTE> data );
	SpawnTotalInterpreterInfo(int totalCount, int index, int itprId, vector<int> vmIds);
	SpawnInterpreterInfo(int itprId, int parentVmId, int vmId, string nodeFileName, string nodeName);
	RemoveInterpreter(int vmId);

	AckRun( int itprId, int result );
	AckOneStep( int itprId, int result );
	AckResumeRun( int itprId, int result );
	AckBreak( int itprId, int vmId, int result );
	AckBreakPoint( int itprId, int vmId, bool enable, uint id, int result );
	AckStop( int itprId, int result );
	AckInput( int itprId, int vmId, int result );
	AckEvent( int itprId, int vmId, string eventName, int result);
	AckStepDebugType(int stepDbgType, int result);
	AckDebugInfo(vector<int> vmIds, int result);
	AckChangeVariable(int itprId, int vmId, string varName, int result);
	AckVMTree(int id, int result);
	AckVMTreeStream(int id, ushort count, ushort index, uint totalBufferSize, vector<BYTE> data );

	SyncVMInstruction( int itprId, int vmId, vector<ushort> indices );
	SyncVMRegister( int itprId, int vmId, int infoType, script::cVirtualMachine::sRegister reg );
	SyncVMSymbolTable( int itprId, int vmId, uint start, uint count, vector<script::sSyncSymbol> symbol );
	SyncVMOutput( int itprId, int vmId, string output );
	SyncVMWidgets( int itprId, int vmId, string widgetName );
	SyncVMArray( int itprId, int vmId, string varName, uint startIdx, uint totalSize, vector<variant_t> array );
	SyncVMArrayBool( int itprId, int vmId, string varName, uint startIdx, uint totalSize, vector<bool> array );
	SyncVMArrayNumber( int itprId, int vmId, string varName, uint startIdx, uint totalSize, vector<float> array );
	SyncVMArrayString( int itprId, int vmId, string varName, uint startIdx, uint totalSize, vector<string> array );
	SyncVMTimer( int itprId, int vmId, string scopeName, int timerId, int time, int actionType );

	ExecuteCustomFunction(string fnName, map<string, vector<string>> args);

	AckHeartBeat();
}


// custom struct type
struct sSyncSymbol
{
	string scope;
	string name;
	variant_t var;
}

struct sRegister
{
	uint idx;
	bool cmp;
	vector<variant_t> val;
}

